// Code generated by go-bindata.
// sources:
// mutation.graphql
// mutations/uploadImageRequest.graphql
// query.graphql
// schema.graphql
// type/account.graphql
// type/component.graphql
// type/media.graphql
// type/printer.graphql
// type/printer_file.graphql
// type/printer_state.graphql
// type/project.graphql
// type/project_metadata.graphql
// type/tag.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x6a\xc3\x30\x18\x44\xf7\x81\xdc\x61\x82\x37\x29\x84\x1e\xc0\xbb\x92\x6c\x4c\x29\xa4\x7f\x07\x50\xac\xa9\xab\x62\x7f\x52\x25\x99\x62\x4a\xef\x5e\x2c\xd9\xa9\xbd\xe8\xf6\xcd\x30\xf3\x0a\x3c\xf6\xf4\x03\xe2\xe0\x08\x4f\xe7\x19\x28\xd1\x48\x83\xf8\x4e\x38\x1b\x82\xb9\xb4\x44\xd7\x47\x15\x8d\x95\x70\xbb\xdd\xa4\xea\xc3\x04\xf0\xbd\xdd\x00\x40\x81\xa3\xa7\x8a\x0c\x50\x10\x7e\xc1\x79\x23\x91\x3e\x87\x75\x8a\xce\x19\xed\x45\x75\x2c\xf1\x1c\xbd\x91\x66\x77\x80\x72\xe6\x9e\xc3\x02\x50\xb4\xb3\x46\xe2\x15\xdd\x94\x38\x2f\xe7\x0a\x9c\xd8\x72\xfc\x4a\x8e\x39\x42\x70\xac\xcd\x9b\xa1\xc6\x65\x48\x81\xd1\xb9\xae\x53\x79\x7e\x37\xba\x44\x75\x1a\x37\xab\xd3\x7f\xea\xf6\x83\x75\x5c\xab\x27\xb4\x56\x4f\x5a\x8b\x6a\x81\x57\xd7\x5a\xa5\x51\xdb\xce\x59\xa1\x4c\xbc\x4f\xf4\x38\xc3\xfd\xb4\x5f\x65\x91\xc3\x5f\xbd\x9c\x06\xd6\x72\x77\x5a\x07\x28\x81\xe9\x54\x43\x44\x0b\x35\x1b\xa2\x51\x6d\x4b\x3f\x2c\x6f\xaa\xb1\xf5\x62\x67\x61\xcf\xcf\x9e\xe1\xba\x9c\xd2\xa7\xcc\x76\x07\xac\x4d\xa6\xd7\x9f\xed\xe6\x37\x00\x00\xff\xff\xef\xbc\xd0\xad\x15\x02\x00\x00")

func mutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_mutationGraphql,
		"mutation.graphql",
	)
}

func mutationGraphql() (*asset, error) {
	bytes, err := mutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutation.graphql", size: 533, mode: os.FileMode(438), modTime: time.Unix(1591337392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mutationsUploadimagerequestGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xc9\x48\x55\x28\x2d\x4e\x2d\x2a\x56\x48\x4c\x4e\xce\x2f\xcd\x2b\xe1\xe5\xca\xcc\x2b\x28\x2d\x51\x08\x2d\xc8\xc9\x4f\x4c\xf1\xcc\x4d\x4c\x4f\x0d\x4a\x2d\x2c\x4d\x2d\x2e\x51\xa8\xe6\xe5\x52\x50\x50\x50\x50\x46\xe8\x49\xcd\x4d\xcc\xcc\x51\x48\x4c\x49\x29\x4a\x2d\x2e\x86\xc8\x26\xe6\x94\x84\xa4\x56\x94\x58\x29\x04\x97\x14\x65\xe6\xa5\xeb\x60\xe8\xc9\x4c\x81\x08\x65\x82\x8c\xb6\x82\xda\xa3\xc8\xcb\x55\x0b\x08\x00\x00\xff\xff\x70\x51\x5c\x46\x8d\x00\x00\x00")

func mutationsUploadimagerequestGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_mutationsUploadimagerequestGraphql,
		"mutations/uploadImageRequest.graphql",
	)
}

func mutationsUploadimagerequestGraphql() (*asset, error) {
	bytes, err := mutationsUploadimagerequestGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutations/uploadImageRequest.graphql", size: 141, mode: os.FileMode(438), modTime: time.Unix(1591333550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcf\x31\x8a\xc3\x30\x10\x85\xe1\x7e\x4e\xf1\x16\x37\xbb\xcd\x1e\xc0\x9d\xd9\x6d\x0c\x29\x1c\x48\x17\x52\x04\x65\x8c\x15\x1c\x8d\x18\x8d\x0a\x13\x72\xf7\x60\x8b\x04\xc7\xdd\xd3\x0f\x9f\x90\x2a\x1c\x06\xc6\x3e\xb3\x4e\xb0\x29\x32\x94\xa3\x72\xe2\x60\x09\xe7\x71\x84\xf4\xb0\x81\xc1\xc1\x74\x42\x14\x3f\x77\x1f\x4c\x96\xda\x74\xed\x2f\x2d\xaa\x5c\x70\x27\xa0\xc2\xce\x27\x83\x64\x43\x54\x1f\x8c\x35\x11\xde\xf3\xdb\x5f\x6a\xb4\xff\x3f\x35\x8e\x5d\x49\x5f\xa7\x2d\x92\x2b\x3b\x2b\xa8\xcc\x0f\xb4\xa4\x2d\x72\x72\x8b\x12\xe6\x47\x13\x56\x87\x15\xfc\x7b\xc5\x42\xe7\x4f\xe7\xc4\x4a\x40\xe2\xb1\xaf\xd1\x38\x27\x39\x18\x3d\xe8\x19\x00\x00\xff\xff\x43\x35\xc5\x0d\x12\x01\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 274, mode: os.FileMode(438), modTime: time.Unix(1590883042, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\x2d\xc8\xc9\x4f\x4c\xe1\xe2\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x3d\x67\x67\x46\x3e\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 62, mode: os.FileMode(438), modTime: time.Unix(1590790344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeAccountGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xc9\x48\x55\x28\x2d\x4e\x2d\x2a\x56\x48\x4c\x4e\xce\x2f\xcd\x2b\xe1\xe5\x2a\xa9\x2c\x48\x55\x70\x84\xf0\x14\xaa\x79\xb9\x14\x14\x14\x14\x94\x11\xea\x52\x73\x13\x33\x73\x14\x12\x53\x52\x8a\x52\x8b\x8b\x21\xb2\x60\x21\x2b\x85\xe0\x92\xa2\xcc\xbc\x74\x1d\x0c\x1d\x99\x29\x10\xa1\xcc\x14\x98\x1a\x5e\xae\x5a\x40\x00\x00\x00\xff\xff\xa2\x2f\x1e\x15\x7b\x00\x00\x00")

func typeAccountGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAccountGraphql,
		"type/account.graphql",
	)
}

func typeAccountGraphql() (*asset, error) {
	bytes, err := typeAccountGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/account.graphql", size: 123, mode: os.FileMode(438), modTime: time.Unix(1590651273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeComponentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x42\xdf\xe1\x2f\x1d\x7c\x87\xae\xba\xb8\x09\xba\x89\x43\x48\xaf\x36\x4a\x72\x21\xb9\x0e\x22\xbe\xbb\x24\x31\x58\xc4\xed\xb8\xff\xfb\xf9\xee\x7a\x9c\x66\xc2\x12\x29\x44\x28\xad\x79\x71\xd2\x36\xf2\xf0\x84\x2d\x5b\xcf\x8e\x9c\xe0\xd9\x36\x00\xd0\x27\x52\xd7\xed\x26\xc2\x8c\x25\x30\xe3\x80\xfd\xae\x5b\x51\x4e\x59\x02\x4f\x90\x55\x83\xa4\x00\x29\x1b\x70\x94\x60\xdc\xb5\x76\xf2\x11\xd9\xca\xd3\x57\x01\x23\x30\xb1\x20\x29\xfc\xdb\xf2\x81\x6f\xa4\x25\x42\x66\x25\xb0\xea\x9e\xbf\xf9\x95\x7f\xdc\x15\x1e\x70\x3e\x94\xb1\xbb\xb4\xcd\xeb\x1d\x00\x00\xff\xff\xdc\x55\x01\xf1\x05\x01\x00\x00")

func typeComponentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeComponentGraphql,
		"type/component.graphql",
	)
}

func typeComponentGraphql() (*asset, error) {
	bytes, err := typeComponentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/component.graphql", size: 261, mode: os.FileMode(438), modTime: time.Unix(1591169501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeMediaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xc9\x48\x55\xc8\x4d\x4d\xc9\x4c\xe4\xe5\x2a\xa9\x2c\x48\x55\xf0\x05\xb1\x15\xaa\x79\xb9\x14\x14\x14\x14\x94\x41\xb2\x60\x11\xf5\x62\x85\xcc\x14\x88\x60\x66\x8a\x95\x82\xa7\x8b\x22\x92\x0a\xb0\xc6\xfc\x34\x98\x39\x20\x71\x90\x90\x95\x42\x70\x49\x51\x66\x5e\x3a\x4c\xa9\x42\x41\x62\x49\x86\x42\x49\xbe\x42\x09\xc2\x4e\x90\x04\x48\x18\x49\x6d\x2d\x20\x00\x00\xff\xff\x9e\xa4\xea\x41\x95\x00\x00\x00")

func typeMediaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMediaGraphql,
		"type/media.graphql",
	)
}

func typeMediaGraphql() (*asset, error) {
	bytes, err := typeMediaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/media.graphql", size: 149, mode: os.FileMode(438), modTime: time.Unix(1591341189, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePrinterGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x31\x4b\x04\x31\x10\x85\xfb\x85\xfd\x0f\xef\xb0\xd1\xc6\xc6\x2e\x9d\x70\x0a\x76\xc2\xd9\x89\x45\xb8\x4c\x2e\x03\xbb\x93\x98\x4c\x10\x11\xff\xbb\x24\xeb\xb2\x0b\x57\xce\xbc\xf7\x3d\xde\xbb\xc1\x23\x1e\x8e\x78\xcd\x2c\x4a\x79\x1c\xf4\x3b\xd1\x7a\xe1\x67\x1c\x80\xe6\xa8\xc2\x9f\x95\xc0\x8e\x44\xd9\x33\xe5\xfb\xa6\xb0\x33\x78\x39\x1e\x16\xd3\x5b\x20\xd8\x89\x6d\x81\x8f\x19\x1a\x08\x69\x49\xe9\x56\xb1\x33\x19\x9c\x34\xb3\x5c\x76\x80\xe7\x89\x0a\xa2\x5c\xf9\xbb\x70\x9b\xac\x86\x95\xba\x33\x78\xff\xef\xf5\xcc\x13\x1d\x3e\xb6\x94\xa2\x56\x09\xd1\x6f\x29\x4d\xeb\x5f\xb3\x6e\x39\xb5\x6b\x41\x9e\xc4\x21\x45\x16\x85\x46\xd4\x42\xbd\xf0\x39\xce\x73\x15\x3e\x5b\x65\xb9\xe0\x8b\x35\xec\x3b\x35\x90\xc4\x75\x6a\x37\xe3\x77\x1c\xfe\x02\x00\x00\xff\xff\x66\xf4\x33\x7b\x40\x01\x00\x00")

func typePrinterGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePrinterGraphql,
		"type/printer.graphql",
	)
}

func typePrinterGraphql() (*asset, error) {
	bytes, err := typePrinterGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/printer.graphql", size: 320, mode: os.FileMode(438), modTime: time.Unix(1590380640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePrinter_fileGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\xca\xc2\x30\x10\x85\xf7\x85\xde\xe1\xfd\xf4\x08\xff\xae\x3b\xa1\x76\x2d\x58\x0f\x10\xda\x89\x19\x48\x93\x9a\x4c\x16\x22\xde\x5d\x9a\x18\x37\xba\x9b\x79\xef\xfb\x86\xe9\x70\xc0\xc8\x96\xe0\x1d\xc4\x10\xfe\x07\x9c\x02\x3b\xa1\xd0\x36\x72\xdf\xa8\x6e\x99\x79\xb4\x0d\x00\x74\xb8\x38\xbe\x25\x02\x2f\xe4\x84\x35\x53\x80\xf6\x21\xfb\x9a\x2d\x15\xca\xa8\x68\x7a\x9c\x25\xb0\xbb\xfe\x55\x71\x7a\x23\x11\x9b\x12\x53\xd2\x7d\xfa\x02\x8f\x51\x78\x55\x42\x0b\x86\x14\x94\xb0\x77\xa5\xa1\x9a\xe7\xbf\x26\x5e\xa9\xc7\x68\xbd\x92\x8f\x59\x79\x78\x0d\xab\xa2\x20\xa6\x79\xa6\xa8\x93\xc5\xb6\x3b\x85\xdb\x9b\x1f\x27\x9e\x6d\xf3\x0a\x00\x00\xff\xff\x86\x09\x44\xb4\x12\x01\x00\x00")

func typePrinter_fileGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePrinter_fileGraphql,
		"type/printer_file.graphql",
	)
}

func typePrinter_fileGraphql() (*asset, error) {
	bytes, err := typePrinter_fileGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/printer_file.graphql", size: 274, mode: os.FileMode(438), modTime: time.Unix(1590282536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePrinter_stateGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xc9\x48\x55\x28\x2e\x49\x2c\x49\x55\xc8\x4f\x53\x28\xc9\x48\x55\x28\x28\xca\xcc\x2b\x49\x2d\xe2\xe5\x2a\xa9\x2c\x48\x55\x08\x80\xf0\x82\xc1\x2a\xaa\x79\xb9\x14\x14\x14\x14\x94\x15\x3c\x8b\x91\x95\x2a\x24\xe7\xe7\xe5\xa5\x26\x97\xe4\x17\x41\xe4\xa1\xdc\xcc\xfc\x3c\x2b\x85\xe0\x92\xa2\xcc\xbc\x74\x45\x88\x04\xd8\x1e\x24\xb1\x5a\x40\x00\x00\x00\xff\xff\xb8\xfb\x1a\xc9\x7f\x00\x00\x00")

func typePrinter_stateGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePrinter_stateGraphql,
		"type/printer_state.graphql",
	)
}

func typePrinter_stateGraphql() (*asset, error) {
	bytes, err := typePrinter_stateGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/printer_state.graphql", size: 127, mode: os.FileMode(438), modTime: time.Unix(1590287718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeProjectGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\x4f\x4b\x03\x31\x10\x05\xf0\x7b\xa1\xdf\xe1\x95\x5e\xfd\x04\xb9\xf9\xe7\xd2\x83\x20\xe8\xad\x78\x98\xdd\x4c\x37\x23\xd9\x4c\xd8\x99\x2a\x8b\xf8\xdd\xa5\x5d\x83\x95\xe2\x31\xbc\xdf\x4b\x5e\xb6\xb8\x45\x9d\xf4\x8d\x7b\xbf\x81\x27\x72\xf4\x7a\xcc\x11\x1d\xe3\xa0\x13\xa8\xcc\x9e\xa4\x0c\xeb\x95\xcf\x95\xf1\xb4\x48\x7c\xae\x57\x00\xb0\xc5\x4b\x62\x48\x3c\x53\x4f\xdc\x6e\x5a\x52\x89\x01\xbb\x87\xcd\x25\x2d\x34\x32\xf4\x70\x6d\x4f\x41\xc0\xb3\x4f\x52\x86\xd6\xd8\xd9\xa5\x43\x3d\x76\x59\xfa\x3c\xe3\x5d\x4c\xba\xcc\xd0\x09\x45\x7f\xfa\x4b\x18\x70\xa7\x9a\x99\xca\x9f\x47\x7b\x1d\xab\x16\x2e\x6e\x20\x33\x35\x21\xe7\x88\x0f\xf1\x74\xbd\xe3\xd7\x06\xec\xef\xdb\x61\xf3\xda\x26\x8d\x34\xb0\xc1\x15\x51\xac\x66\x9a\xff\xf9\xf9\x99\x05\xec\x1f\x39\x0a\x9d\xda\x5f\xdf\x01\x00\x00\xff\xff\xe5\x4a\x50\xd9\x68\x01\x00\x00")

func typeProjectGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeProjectGraphql,
		"type/project.graphql",
	)
}

func typeProjectGraphql() (*asset, error) {
	bytes, err := typeProjectGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/project.graphql", size: 360, mode: os.FileMode(438), modTime: time.Unix(1591344724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeProject_metadataGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func typeProject_metadataGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeProject_metadataGraphql,
		"type/project_metadata.graphql",
	)
}

func typeProject_metadataGraphql() (*asset, error) {
	bytes, err := typeProject_metadataGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/project_metadata.graphql", size: 0, mode: os.FileMode(438), modTime: time.Unix(1590645210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeTagGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x49\x4c\x57\xa8\xe6\xe5\x52\x50\x50\x50\xc8\x4b\xcc\x4d\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x57\x84\x08\x95\xa7\x66\xa6\x67\x94\x58\x29\x78\xe6\x95\x28\xf2\x72\xd5\x02\x02\x00\x00\xff\xff\x57\x2f\x5c\xc7\x32\x00\x00\x00")

func typeTagGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeTagGraphql,
		"type/tag.graphql",
	)
}

func typeTagGraphql() (*asset, error) {
	bytes, err := typeTagGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/tag.graphql", size: 50, mode: os.FileMode(438), modTime: time.Unix(1590597163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mutation.graphql": mutationGraphql,
	"mutations/uploadImageRequest.graphql": mutationsUploadimagerequestGraphql,
	"query.graphql": queryGraphql,
	"schema.graphql": schemaGraphql,
	"type/account.graphql": typeAccountGraphql,
	"type/component.graphql": typeComponentGraphql,
	"type/media.graphql": typeMediaGraphql,
	"type/printer.graphql": typePrinterGraphql,
	"type/printer_file.graphql": typePrinter_fileGraphql,
	"type/printer_state.graphql": typePrinter_stateGraphql,
	"type/project.graphql": typeProjectGraphql,
	"type/project_metadata.graphql": typeProject_metadataGraphql,
	"type/tag.graphql": typeTagGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mutation.graphql": &bintree{mutationGraphql, map[string]*bintree{}},
	"mutations": &bintree{nil, map[string]*bintree{
		"uploadImageRequest.graphql": &bintree{mutationsUploadimagerequestGraphql, map[string]*bintree{}},
	}},
	"query.graphql": &bintree{queryGraphql, map[string]*bintree{}},
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"account.graphql": &bintree{typeAccountGraphql, map[string]*bintree{}},
		"component.graphql": &bintree{typeComponentGraphql, map[string]*bintree{}},
		"media.graphql": &bintree{typeMediaGraphql, map[string]*bintree{}},
		"printer.graphql": &bintree{typePrinterGraphql, map[string]*bintree{}},
		"printer_file.graphql": &bintree{typePrinter_fileGraphql, map[string]*bintree{}},
		"printer_state.graphql": &bintree{typePrinter_stateGraphql, map[string]*bintree{}},
		"project.graphql": &bintree{typeProjectGraphql, map[string]*bintree{}},
		"project_metadata.graphql": &bintree{typeProject_metadataGraphql, map[string]*bintree{}},
		"tag.graphql": &bintree{typeTagGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

